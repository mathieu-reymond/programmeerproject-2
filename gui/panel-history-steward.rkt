#lang racket
(require racket/gui/base)

(require "../db/manager.rkt")
(require "../structure/map.rkt")
(require "../internal/element-type.rkt")
(require "graph.rkt")

(provide panel-history-steward)

;(define temp-map (new-map))
;(temp-map 'add! 1 20)
;(temp-map 'add! 2 20)
;(temp-map 'add! 3 19)
;(temp-map 'add! 4 18)
;(temp-map 'add! 5 21)
;(temp-map 'add! 6 20)
;(temp-map 'add! 7 22)
;(temp-map 'add! 8 19)
;(temp-map 'add! 9 18)
;(temp-map 'add! 10 21)
;(define light-map (new-map))
;(light-map 'add! 1 90)
;(light-map 'add! 2 90)
;(light-map 'add! 3 90)
;(light-map 'add! 4 90)
;(light-map 'add! 5 90)
;(light-map 'add! 6 90)
;(light-map 'add! 7 90)
;(light-map 'add! 8 90)
;(light-map 'add! 9 90)
;(light-map 'add! 10 100)
;(define test-graph (new-graph))
;(test-graph 'add! "temperature" temp-map)
;(test-graph 'add! "light" light-map)

(define db-path "db/domotica.db")

(define (panel-history-steward prnt steward)
  (let ((graph (new-graph))
        (data ((new-db-manager db-path) 'get-steward-time-value steward)))
    ;for each element
    (let element-loop ((element (data 'get-keys)))
      (unless (eq? element '())
        ;make a map (time, value)
        (let* ((map (new-map))
               (pairs (data 'find (mcar element)))
               (first-time-value (if (eq? '() pairs)
                                     #f
                                     (vector-ref (car pairs) 0))))
          ;for each time
          (let time-loop ((time pairs))
            (unless (eq? time '())
              ;add (time, value) to map
              ;(map 'add! (- (vector-ref (car time) 0) first-time-value) (vector-ref (car time) 1))
              (map 'add! (vector-ref (car time) 0) (vector-ref (car time) 1))
              (time-loop (cdr time))))
          ;add map to graph
          (graph 'add! (to-string (mcar element)) map))
        (element-loop (mcdr element))))
    (panel-graph prnt graph)))